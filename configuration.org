#+TITLE: Literate Emacs Configuration
#+DESCRIPTION: Literate config for my emacs
#+AUTHOR: Michael Zappa

init.el uses org-babel-load file to automatically load in the emacs-lisp 
blocks.

* General
** Packages
#+BEGIN_SRC emacs-lisp
  ;; setting up the MELPA repo
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)

  ;; install use-package if not installed
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; ensure use-package by default
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  ;; compile packages and use newest version
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
** Personal
#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory "~/.emacs.d/user-dir")

  (setq user-full-name "Michael Zappa")
  (setq user-mail-address "zapprich@gmail.com")
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  ;; minor mode for inserting parens, braces, quotes and the like in pairs
  (electric-pair-mode)

  ;; pretty symbols
  (global-prettify-symbols-mode t)

  ;; reduce the frequency of garbage collection by making it happen on
  ;; each 50MB of allocated data (the default is on every 0.76MB)
  (setq gc-cons-threshold 50000000)

  ;; warn when opening files bigger than 100MB
  (setq large-file-warning-threshold 100000000)

  ;; quit Emacs directly even if there are running processes
  (setq confirm-kill-processes nil)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp
  ;; scratch screen
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "")

  ;; hecking bell
  (setq ring-bell-function 'ignore)

  ;; turn off things
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)

  ;; initial frame maximized
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

  ; theme
  (use-package nord-theme
    :ensure t
    :config
    (load-theme 'nord t))

  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format '((:eval (projectile-project-name)))

  ;; newline at end of file
  (setq require-final-newline t)

  ;; wrap lines at 80 characters
  (setq-default fill-column 80)

  ;; line numbers, column number, size indication
  (global-display-line-numbers-mode)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)

  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC 
* Mouse and Keys
#+BEGIN_SRC emacs-lisp
;; scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; change font size binding
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; keybinding to reload configuration
(global-set-key (kbd "C-c m") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))

;; keybinding to open configuration file (this file)
(global-set-key (kbd "C-c f") (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))
#+END_SRC

* Utility Packages
** counsel
#+BEGIN_SRC emacs-lisp
;; autocomplete interface for search
(use-package counsel
  :ensure t
  :demand
  :bind 
   (("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-x C-r" . counsel-recentf)
    ("C-s" . swiper))
  :commands ivy-mode)
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC
** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
;; Force Emacs to use shell path
(use-package exec-path-from-shell
  :ensure t
  :commands exec-path-from-shell-initialize)
#+END_SRC
** hl-line
#+BEGIN_SRC emacs-lisp
;; highlight the current line
(use-package hl-line
  :config
  (global-hl-line-mode +1))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
;; magit git interface
(use-package magit
  :ensure t)
#+END_SRC
** minions
#+BEGIN_SRC emacs-lisp
  ;; turns off all minor modes in modeline
  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
	  minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))
#+END_SRC
** nov
#+BEGIN_SRC emacs-lisp
;; epub reader mode
(use-package nov
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
;; project manager
(use-package projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-project-search-path '("~/Projects"))
  :config
  (global-set-key (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
;; frequency sorter to integrate with counsel
(use-package smex
  :ensure t)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
;; sidebar file explorer
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
	("C-x p" . treemacs))
  :commands (treemacs-filewatch-mode
	     treemacs-git-mode
	     treemacs-follow-mode)
  :config
  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1))))

;; integrate git with treemacs
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

;; integrate projectile with treemacs
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
;; shows possible key combinations
(use-package which-key
  :ensure t
  :config
  (diminish 'which-key-mode)
  (which-key-mode))
#+END_SRC
** windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure t
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings)
  ;; Make windmove work in Org mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right))
#+END_SRC
* Flycheck and Company
#+BEGIN_SRC emacs-lisp
;; flycheck for syntax checking
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; company for text-completion
(use-package company
  :ensure t
  :config
  (diminish 'company-mode)
  (setq company-idle-delay 0.5)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 2)
  (setq company-tooltip-align-annotations t)
  ;; invert the navigation direction if the the completion popup-isearch-match
  ;; is displayed on top (happens near the bottom of windows)
  (setq company-tooltip-flip-when-above t)
  (global-company-mode))
#+END_SRC
* Languages
** LSP Mode
#+BEGIN_SRC emacs-lisp
;; lsp-mode plus other recommended packages and configuration
(use-package lsp-mode
  :commands lsp
  :ensure t
  :config 
  (diminish lsp-mode))

(use-package lsp-ui
  :ensure t)

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(setq lsp-completion-provider :capf)
(setq lsp-completion-enable t)
#+END_SRC
** C
Needs clangd.
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'lsp)
#+END_SRC
** Elisp
#+BEGIN_SRC emacs-lisp
;; Help for emacs-lisp functions
(use-package eldoc
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC
** Elixir
Needs elixir-ls https://github.com/elixir-lsp/elixir-ls.
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :ensure t
  :hook (elixir-mode . lsp))
#+END_SRC
** Rust
Needs rust language server (rls) https://github.com/rust-lang/rls.
#+BEGIN_SRC emacs-lisp
;; hook up rust-mode with the language server
(use-package rust-mode
  :ensure t
  :hook (rust-mode . lsp))

;; cargo minor mode for cargo keybindings
(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
#+END_SRC
