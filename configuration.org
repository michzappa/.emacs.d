#+TITLE: Literate Emacs Configuration
#+DESCRIPTION: Literate config for my emacs
#+AUTHOR: Michael Zappa

init.el uses org-babel-load file to automatically load in the emacs-lisp 
blocks.

- TODO organize config by purpose more? especially w/ respect to packages
- TODO add more org config: directory, export to html, pdf, latex from hrs config https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org
- TODO de-capitalize BEGIN_SRC and END_SRC
- TODO use more of use-package macros

* Packages Setup
Setting up the package archives and the lisp to automatically load all my packages.
#+BEGIN_SRC emacs-lisp
	;; setting up the MELPA repo
	(require 'package)
	(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
	(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
	(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

	;; emacs tells me this is unnecessary
	;;(package-initialize)

	;; install use-package if not installed
	(when (not (package-installed-p 'use-package))
		(package-refresh-contents)
		(package-install 'use-package))

	(unless package-archive-contents
		(package-refresh-contents))

	;; ensure use-package by default
	(require 'use-package-ensure)
	(setq use-package-always-ensure t)

	;; compile packages
	(use-package auto-compile
		:config (auto-compile-on-load-mode))

	;; use newest version of packages
	(setq load-prefer-newer t)
#+END_SRC
* Personal
Giving emacs my information.
#+BEGIN_SRC emacs-lisp
	(setq user-emacs-directory "~/.emacs.d/user-dir")
	(setq custom-file "~/.emacs.d/custom.el")

	(setq user-full-name "Michael Zappa")
	(setq user-mail-address "zapprich@gmail.com")
#+END_SRC

* Misc
Miscellanious things which should be put somewhere else eventually.
#+BEGIN_SRC emacs-lisp
	;; scroll compilation output in the window
	(setq compilation-scroll-output t)

	;; minor mode for inserting parens, braces, quotes and the like in pairs. turned "<> off for org mode since it makes the shortcut for org blocks difficult."
	(electric-pair-mode)
	(add-hook 'org-mode-hook
						(lambda () (setq-local electric-pair-inhibit-predicate
															`(lambda (c)
																 (if (eq c ?<)
																		 t
																	 (electric-pair-inhibit-predicate c))))))

	;; pretty symbols
	(global-prettify-symbols-mode t)

	;; reduce the frequency of garbage collection by making it happen on
	;; each 50MB of allocated data (the default is on every 0.76MB)
	(setq gc-cons-threshold 50000000)

	;; warn when opening files bigger than 100MB
	(setq large-file-warning-threshold 100000000)

	;; quit Emacs directly even if there are running processes
	(setq confirm-kill-processes nil)

	;; store all backup and autosave files in the tmp dir
	(setq backup-directory-alist
				`((".*" . ,temporary-file-directory)))
	(setq auto-save-file-name-transforms
				`((".*" ,temporary-file-directory t)))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
	;; scratch screen
	(setq inhibit-startup-screen t)
	(setq initial-scratch-message "")

	;; hecking bell
	(setq ring-bell-function 'ignore)

	;; shallow tabs
	(setq-default tab-width 2)

	;; tab mode
	(tab-bar-mode)

	(with-eval-after-load 'org
		(define-key org-mode-map [(control tab)] 'tab-bar-switch-to-next-tab))

	;; turn off things
	;;(menu-bar-mode -1)
	(toggle-scroll-bar -1)
	(tool-bar-mode -1)
	(blink-cursor-mode -1)

	;; initial frame maximized
	(add-to-list 'initial-frame-alist '(fullscreen . maximized))

	;; nord-theme, doesn't have tab-bar support yet
	(use-package nord-theme
		:config
		(load-theme 'nord t))

	;;more useful frame title, that show either a file or a
	;; buffer name (if the buffer isn't visiting a file)
	(setq frame-title-format '((:eval (projectile-project-name))))

	;; newline at end of file
	(setq require-final-newline t)

	;; wrap lines at 80 characters
	(setq-default fill-column 80)

	;; wraps visual lines
	(global-visual-line-mode)

	;; line numbers, column number, size indication
	(global-display-line-numbers-mode)
	(line-number-mode t)
	(column-number-mode t)
	(size-indication-mode t)

	;; enable y/n answers
	(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC 
* Mouse and Keys
#+BEGIN_SRC emacs-lisp
	;; scrolling
	(setq scroll-margin 0
				scroll-conservatively 100000
				scroll-preserve-screen-position 1)

	;; change font size binding
	(global-set-key (kbd "C-+") 'text-scale-increase)
	(global-set-key (kbd "C--") 'text-scale-decrease)

	;; keybinding to reload configuration
	(global-set-key (kbd "C-c m") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))

	;; keybinding to open configuration file (this file)
	(global-set-key (kbd "C-c n") (lambda ()  (interactive) (find-file "~/.emacs.d/configuration.org")))

	;; assume I want to close current buffer with ""C-x k""
	(global-set-key (kbd "C-x k") (lambda () (interactive) (kill-buffer (current-buffer))))

	;; function for toggling comments
	(defun comment-or-uncomment-region-or-line ()
			"Comments or uncomments the region or the current line if there's no active region."
			(interactive)
			(let (beg end)
					(if (region-active-p)
							(setq beg (region-beginning) end (region-end))
							(setq beg (line-beginning-position) end (line-end-position)))
					(comment-or-uncomment-region beg end)
					(forward-line)))

	;; binding toggle-comment to "C-/" for consistency with other editors
	(global-set-key (kbd "C-/") 'comment-or-uncomment-region-or-line)

	;; replacing keybinding for undo as it is "C-/" by default
	(global-set-key (kbd "C-.") 'undo)
#+END_SRC

* Utility Packages
** ag
Needs ag installed, silversearcher-ag debian package.
#+BEGIN_SRC emacs-lisp
  ;; search within projects using projectile-ag
  (use-package ag)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  ;skip around the screen
  (use-package avy
    :init
    (global-set-key (kbd "C-;") 'avy-goto-char-2))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
	;; company for text-completion
	(use-package company
		:config
		(global-company-mode))
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
	;; autocomplete interface for search
	(use-package counsel
		:bind
		(("C-s" . swiper)
		 ("C-x C-r" . counsel-recentf))
		:config 
		(ivy-mode)
		(counsel-mode))
#+END_SRC
** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
;; Force Emacs to use shell path
(use-package exec-path-from-shell
  :commands exec-path-from-shell-initialize)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
;; flycheck for syntax checking
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC
** hl-line
#+BEGIN_SRC emacs-lisp
;; highlight the current line
(use-package hl-line
  :config
  (global-hl-line-mode +1))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
;; magit git interface
(use-package magit)
#+END_SRC
** minions
#+BEGIN_SRC emacs-lisp
  ;; turns off all minor modes in modeline
  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
	  minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))
#+END_SRC
** nov
#+BEGIN_SRC emacs-lisp
;; epub reader mode
(use-package nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
;; project manager
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-project-search-path '("~/Projects"))
  :config
  (global-set-key (kbd "C-c p") 'projectile-command-map)
  (global-set-key (kbd "C-c v")  'projectile-ag)
  (projectile-mode +1))
#+END_SRC
** paredit
#+BEGIN_SRC emacs-lisp
	(use-package paredit
		:config
		(add-hook 'emacs-lisp-mode-hook (lambda () (setq show-paren-style 'expression))))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient)
  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
;; frequency sorter to integrate with counsel
(use-package smex)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
;; sidebar file explorer
(use-package treemacs
  :bind
  (:map global-map
	("C-x p" . treemacs))
  :commands (treemacs-filewatch-mode
	     treemacs-git-mode
	     treemacs-follow-mode)
  :config
  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1))))

;; integrate git with treemacs
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

;; integrate projectile with treemacs
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
;; shows possible key combinations
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings)
  ;; Make windmove work in Org mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right))
#+END_SRC
* Languages
** LSP Mode
#+BEGIN_SRC emacs-lisp
	;; lsp-mode plus other recommended packages and configuration
	(use-package lsp-mode
		:bind
		(:map lsp-mode-map
					(("\C-\M-b" . lsp-find-implementation)
					 ("M-RET" . lsp-execute-code-action)))
		:config
		;; performance enhancements
		(setq gc-cons-threshold 100000000
					read-process-output-max (* 1024 1024)
					lsp-idle-delay 0.500))

	;; ui features for lsp-mode
	(use-package lsp-ui
		:after lsp-mode
		:bind
		("M-i" . lsp-ui-imenu))

	;; integration for lsp with ivy and treemacs
	(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	;; completion provider
	(setq lsp-completion-provider :capf)
	(setq lsp-completion-enable t)

	;; debugging mode
	(use-package dap-mode
		:config
		(dap-mode t)
		(dap-ui-mode t)
		(dap-tooltip-mode 1)
		(tooltip-mode 1))
#+END_SRC
** C
Needs clangd.
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'lsp)
#+END_SRC
** Elisp
#+BEGIN_SRC emacs-lisp
;; Help for emacs-lisp functions
(use-package eldoc
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC
** Elixir
Needs elixir-ls https://github.com/elixir-lsp/elixir-ls.
#+BEGIN_SRC emacs-lisp
	;; Elixir major mode hooked up to lsp
	(use-package elixir-mode
		:hook (elixir-mode . lsp))

	;; minor mode for mix commands
	(use-package mix
		:hook (elixir-mode mix-minor-mode))
#+END_SRC
** Java
	 #+begin_src emacs-lisp
		 (use-package lsp-java
			 :config
			 (setq lsp-file-watch-ignored '(".ida", ".git", "build")
						 lsp-java-import-order '["" "java" "javax" "#"])
			 :hook (java-mode . lsp))

		 ;; debugging
		 (use-package dap-java
			 :config
			 (global-set-key (kbd "<f7>") 'dap-step-in)
			 (global-set-key (kbd "<f8>") 'dap-net)
			 (global-set-key (kbd "<f9>") 'dap-continue))
	 #+end_src
** OCaml
Needs OCaml language server https://github.com/ocaml/ocaml-lsp.
#+BEGIN_SRC emacs-lisp
	;; OCaml major mode
	(use-package tuareg
		:hook (tuareg-mode . lsp))

	;; dune integration, don't know how to use
	(use-package dune)
#+END_SRC
** Python
Needs python language server https://github.com/palantir/python-language-server.
#+BEGIN_SRC emacs-lisp
	(use-package python-mode
		:config
		(add-hook 'python-mode-hook 'lsp))
#+END_SRC
** Rust
Needs rust language server (rls) https://github.com/rust-lang/rls.
#+BEGIN_SRC emacs-lisp
;; hook up rust-mode with the language server
(use-package rust-mode
  :config
  (setq rust-format-on-save t)
  :hook (rust-mode . lsp))

;; cargo minor mode for cargo keybindings
(use-package cargo
  :hook (rust-mode . cargo-minor-mode))
#+END_SRC
** sh
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook
	    (lambda ()
	      (setq sh-basic-offset 2
		    shr-indentation 2)))
#+END_SRC
* Orgmode
#+BEGIN_SRC emacs-lisp
	;; bullets instead of asterisks
	(use-package org-bullets
		:hook (org-mode . org-bullets-mode))

	;; org src blocks act more like the major mode
	(setq org-src-fontify-natively t)
	(setq org-src-tab-acts-natively t)

	;; editing source block in same window
	(setq org-src-window-setup 'current-window)

	;; for the "old-school" <s-<tab> to make src blocks
	(require 'org-tempo)
#+END_SRC
